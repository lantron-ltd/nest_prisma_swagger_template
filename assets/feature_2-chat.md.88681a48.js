import{_ as s,c as a,o as n,b as e}from"./app.6ef46020.js";const p="/npsg/feature/chat/chat.png",u=JSON.parse('{"title":"即时聊天","description":"","frontmatter":{},"headers":[],"relativePath":"feature/2-chat.md","lastUpdated":1675180285000}'),l={name:"feature/2-chat.md"},o=e('<h4 id="返回功能介绍" tabindex="-1"><a href="/npsg/feature/">返回功能介绍</a></h4><hr><h1 id="即时聊天" tabindex="-1">即时聊天</h1><p>使用了<code>ejs</code>作用前端界面来进行交互,如果开多个聊天窗口，消息会在多个聊天窗口中实时同步显示。 <img src="'+p+`" alt="chat"></p><h2 id="chatcontroller" tabindex="-1">ChatController</h2><p><code>chat</code>会重定向到<code>ejs</code>的<code>chat.ejs</code>文件中，然后在<code>chat.ejs</code>中调用<code>api/chat</code>从数据库中获取所有消息。</p><h2 id="chatgateway" tabindex="-1">ChatGateway</h2><p>在<code>ChatGateway</code>中通过<code>@WebSocketServer</code>命令实例化了一个<code>websocket</code>，并实现了<code>OnGatewayInit(afterInit)</code>, <code>OnGatewayConnection(handleConnection)</code>, <code>OnGatewayDisconnect(handleDisconnect)</code>三个接口用来监听<code>websocket</code>的生命周期，用于在用户连接时、连接后、断开时进行一些的逻辑处理。</p><p>通过<code>@SubscribeMessage(&#39;sendMessage&#39;)</code>订阅了<code>sendMessage</code>，并通过前端<code>emit</code>后进行接收</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">sendMessage</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">message</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  socket.</span><span style="color:#B392F0;">emit</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;sendMessage&#39;</span><span style="color:#E1E4E8;">, message);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sendMessage</span><span style="color:#24292E;">(</span><span style="color:#E36209;">message</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  socket.</span><span style="color:#6F42C1;">emit</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;sendMessage&#39;</span><span style="color:#24292E;">, message);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span></code></pre></div><p>如果有用户发送了消息之后，在服务器进行反向<code>emit</code></p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#B392F0;">SubscribeMessage</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;sendMessage&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  async </span><span style="color:#B392F0;">handleSendMessage</span><span style="color:#E1E4E8;">(client: Socket, payload: ChatEntity): </span><span style="color:#79B8FF;">Promise</span><span style="color:#F97583;">&lt;void&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    await this.chatService.createMessage(payload);</span></span>
<span class="line"><span style="color:#E1E4E8;">    this.server.emit(</span><span style="color:#9ECBFF;">&#39;recMessage&#39;</span><span style="color:#E1E4E8;">, payload);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">  @</span><span style="color:#6F42C1;">SubscribeMessage</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;sendMessage&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  async </span><span style="color:#6F42C1;">handleSendMessage</span><span style="color:#24292E;">(client: Socket, payload: ChatEntity): </span><span style="color:#005CC5;">Promise</span><span style="color:#D73A49;">&lt;void&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    await this.chatService.createMessage(payload);</span></span>
<span class="line"><span style="color:#24292E;">    this.server.emit(</span><span style="color:#032F62;">&#39;recMessage&#39;</span><span style="color:#24292E;">, payload);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span></code></pre></div><p>然后在前端进行监听，并将收到的消息推送到消息列表</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">socket.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;recMessage&#39;</span><span style="color:#E1E4E8;">, (</span><span style="color:#FFAB70;">message</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  messages.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(message);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">loadDate</span><span style="color:#E1E4E8;">(messages);</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">socket.</span><span style="color:#6F42C1;">on</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;recMessage&#39;</span><span style="color:#24292E;">, (</span><span style="color:#E36209;">message</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  messages.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(message);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">loadDate</span><span style="color:#24292E;">(messages);</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span></code></pre></div><p>如果一来就可以进行实时的聊天了</p><h2 id="chatservice" tabindex="-1">ChatService</h2><ul><li>创建消息，在服务器收到客户端的<code>emit</code>之后调用</li><li>获取消息列表，在用户进入服务器初始化的时候进行调用</li></ul><h2 id="代码目录结构" tabindex="-1">代码目录结构</h2><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">├── chat.controller.ts</span></span>
<span class="line"><span style="color:#E1E4E8;">├── chat.gateway.ts</span></span>
<span class="line"><span style="color:#E1E4E8;">├── chat.module.ts</span></span>
<span class="line"><span style="color:#E1E4E8;">├── chat.service.ts</span></span>
<span class="line"><span style="color:#E1E4E8;">└── entities</span></span>
<span class="line"><span style="color:#E1E4E8;">    └── chat.entity.ts</span></span>
<span class="line"></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">├── chat.controller.ts</span></span>
<span class="line"><span style="color:#24292E;">├── chat.gateway.ts</span></span>
<span class="line"><span style="color:#24292E;">├── chat.module.ts</span></span>
<span class="line"><span style="color:#24292E;">├── chat.service.ts</span></span>
<span class="line"><span style="color:#24292E;">└── entities</span></span>
<span class="line"><span style="color:#24292E;">    └── chat.entity.ts</span></span>
<span class="line"></span></code></pre></div>`,19),c=[o];function t(r,i,E,y,d,h){return n(),a("div",null,c)}const F=s(l,[["render",t]]);export{u as __pageData,F as default};
